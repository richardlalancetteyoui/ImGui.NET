//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/richardlalancette/youidev/ImGui.NET/src/ImGui.NET.SampleProgram/youi.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class youiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, IDENTIFIER=3, SEMI=4, SCREEN=5, CHECK=6, BUTTON=7, WS=8, 
		NEWLINE=9;
	public const int
		RULE_statements = 0, RULE_statement = 1, RULE_control_arguments = 2, RULE_screen = 3, 
		RULE_button = 4, RULE_check = 5;
	public static readonly string[] ruleNames = {
		"statements", "statement", "control_arguments", "screen", "button", "check"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", null, "';'", "'screen'", "'check'", "'button'", null, 
		"'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "IDENTIFIER", "SEMI", "SCREEN", "CHECK", "BUTTON", "WS", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "youi.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static youiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public youiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public youiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12; statement();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << SCREEN) | (1L << CHECK) | (1L << BUTTON))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ScreenContext screen() {
			return GetRuleContext<ScreenContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCREEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; screen();
				}
				break;
			case T__0:
			case BUTTON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; button();
				}
				break;
			case CHECK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 19; check();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_argumentsContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(youiParser.IDENTIFIER, 0); }
		public Control_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterControl_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitControl_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Control_argumentsContext control_arguments() {
		Control_argumentsContext _localctx = new Control_argumentsContext(Context, State);
		EnterRule(_localctx, 4, RULE_control_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScreenContext : ParserRuleContext {
		public ITerminalNode SCREEN() { return GetToken(youiParser.SCREEN, 0); }
		public Control_argumentsContext control_arguments() {
			return GetRuleContext<Control_argumentsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(youiParser.SEMI, 0); }
		public ScreenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_screen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterScreen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitScreen(this);
		}
	}

	[RuleVersion(0)]
	public ScreenContext screen() {
		ScreenContext _localctx = new ScreenContext(Context, State);
		EnterRule(_localctx, 6, RULE_screen);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(SCREEN);
				State = 25; control_arguments();
				State = 26; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; Match(SCREEN);
				State = 29; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ButtonContext : ParserRuleContext {
		public Control_argumentsContext control_arguments() {
			return GetRuleContext<Control_argumentsContext>(0);
		}
		public ITerminalNode BUTTON() { return GetToken(youiParser.BUTTON, 0); }
		public ITerminalNode SEMI() { return GetToken(youiParser.SEMI, 0); }
		public ButtonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_button; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterButton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitButton(this);
		}
	}

	[RuleVersion(0)]
	public ButtonContext button() {
		ButtonContext _localctx = new ButtonContext(Context, State);
		EnterRule(_localctx, 8, RULE_button);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; Match(T__0);
				State = 33; control_arguments();
				State = 34; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; Match(T__0);
				State = 37; Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; Match(BUTTON);
				State = 39; Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 40; Match(BUTTON);
				State = 41; control_arguments();
				State = 42; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(youiParser.CHECK, 0); }
		public Control_argumentsContext control_arguments() {
			return GetRuleContext<Control_argumentsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(youiParser.SEMI, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		CheckContext _localctx = new CheckContext(Context, State);
		EnterRule(_localctx, 10, RULE_check);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(CHECK);
			State = 47; control_arguments();
			State = 48; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x35', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x6', '\x2', 
		'\x10', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x11', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x17', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '!', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '/', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x2', '\x2', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', '\x35', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x18', '\x3', '\x2', '\x2', '\x2', '\b', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x3', '\x3', '\x2', '\x2', '\x2', '\x13', '\x17', 
		'\x5', '\b', '\x5', '\x2', '\x14', '\x17', '\x5', '\n', '\x6', '\x2', 
		'\x15', '\x17', '\x5', '\f', '\a', '\x2', '\x16', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x19', '\a', '\x5', '\x2', '\x2', '\x19', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1B', '\a', '\a', '\x2', '\x2', '\x1B', '\x1C', 
		'\x5', '\x6', '\x4', '\x2', '\x1C', '\x1D', '\a', '\x6', '\x2', '\x2', 
		'\x1D', '!', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', '\a', '\x2', 
		'\x2', '\x1F', '!', '\a', '\x6', '\x2', '\x2', ' ', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '!', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\"', '#', '\a', '\x3', '\x2', '\x2', '#', '$', '\x5', 
		'\x6', '\x4', '\x2', '$', '%', '\a', '\x4', '\x2', '\x2', '%', '/', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\a', '\x3', '\x2', '\x2', '\'', '/', 
		'\a', '\x4', '\x2', '\x2', '(', ')', '\a', '\t', '\x2', '\x2', ')', '/', 
		'\a', '\x6', '\x2', '\x2', '*', '+', '\a', '\t', '\x2', '\x2', '+', ',', 
		'\x5', '\x6', '\x4', '\x2', ',', '-', '\a', '\x6', '\x2', '\x2', '-', 
		'/', '\x3', '\x2', '\x2', '\x2', '.', '\"', '\x3', '\x2', '\x2', '\x2', 
		'.', '&', '\x3', '\x2', '\x2', '\x2', '.', '(', '\x3', '\x2', '\x2', '\x2', 
		'.', '*', '\x3', '\x2', '\x2', '\x2', '/', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\b', '\x2', '\x2', '\x31', '\x32', '\x5', 
		'\x6', '\x4', '\x2', '\x32', '\x33', '\a', '\x6', '\x2', '\x2', '\x33', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x6', '\x11', '\x16', ' ', '.',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
