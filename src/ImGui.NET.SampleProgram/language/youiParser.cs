//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/richardlalancette/youidev/ImGui.NET/src/ImGui.NET.SampleProgram/youi.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class youiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, IDENTIFIER=4, SEMI=5, WS=6, NEWLINE=7;
	public const int
		RULE_statements = 0, RULE_statement = 1, RULE_control_arguments = 2, RULE_screen = 3, 
		RULE_button = 4;
	public static readonly string[] ruleNames = {
		"statements", "statement", "control_arguments", "screen", "button"
	};

	private static readonly string[] _LiteralNames = {
		null, "'|'", "'['", "']'", null, "';'", null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "IDENTIFIER", "SEMI", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "youi.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static youiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public youiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public youiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10; statement();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ScreenContext screen() {
			return GetRuleContext<ScreenContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 17;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 15; screen();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 16; button();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_argumentsContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(youiParser.IDENTIFIER, 0); }
		public Control_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterControl_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitControl_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Control_argumentsContext control_arguments() {
		Control_argumentsContext _localctx = new Control_argumentsContext(Context, State);
		EnterRule(_localctx, 4, RULE_control_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 19; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScreenContext : ParserRuleContext {
		public Control_argumentsContext control_arguments() {
			return GetRuleContext<Control_argumentsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(youiParser.SEMI, 0); }
		public ScreenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_screen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterScreen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitScreen(this);
		}
	}

	[RuleVersion(0)]
	public ScreenContext screen() {
		ScreenContext _localctx = new ScreenContext(Context, State);
		EnterRule(_localctx, 6, RULE_screen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(T__0);
			State = 23; control_arguments();
			State = 24; Match(T__0);
			State = 25; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ButtonContext : ParserRuleContext {
		public Control_argumentsContext control_arguments() {
			return GetRuleContext<Control_argumentsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(youiParser.SEMI, 0); }
		public ButtonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_button; } }
		public override void EnterRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.EnterButton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IyouiListener typedListener = listener as IyouiListener;
			if (typedListener != null) typedListener.ExitButton(this);
		}
	}

	[RuleVersion(0)]
	public ButtonContext button() {
		ButtonContext _localctx = new ButtonContext(Context, State);
		EnterRule(_localctx, 8, RULE_button);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; Match(T__1);
				State = 28; control_arguments();
				State = 29; Match(T__2);
				State = 30; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; Match(T__1);
				State = 33; Match(T__2);
				State = 34; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '(', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x6', '\x2', '\xE', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\xF', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x14', 
		'\n', '\x3', '\x3', '\x4', '\x5', '\x4', '\x17', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '&', '\n', '\x6', '\x3', '\x6', 
		'\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', 
		'&', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x4', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x16', '\x3', '\x2', '\x2', '\x2', '\b', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\n', '%', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x14', '\x5', '\b', '\x5', '\x2', '\x12', 
		'\x14', '\x5', '\n', '\x6', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x17', '\a', '\x6', '\x2', '\x2', '\x16', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\a', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', 
		'\x3', '\x2', '\x2', '\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', 
		'\x1B', '\a', '\x3', '\x2', '\x2', '\x1B', '\x1C', '\a', '\a', '\x2', 
		'\x2', '\x1C', '\t', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'\x4', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\x6', '\x4', '\x2', '\x1F', 
		' ', '\a', '\x5', '\x2', '\x2', ' ', '!', '\a', '\a', '\x2', '\x2', '!', 
		'&', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x4', '\x2', '\x2', 
		'#', '$', '\a', '\x5', '\x2', '\x2', '$', '&', '\a', '\a', '\x2', '\x2', 
		'%', '\x1D', '\x3', '\x2', '\x2', '\x2', '%', '\"', '\x3', '\x2', '\x2', 
		'\x2', '&', '\v', '\x3', '\x2', '\x2', '\x2', '\x6', '\xF', '\x13', '\x16', 
		'%',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
