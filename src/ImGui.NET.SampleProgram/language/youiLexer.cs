//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/richardlalancette/youidev/ImGui.NET/src/ImGui.NET.SampleProgram/youi.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class youiLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, IDENTIFIER=3, SEMI=4, SCREEN=5, CHECK=6, BUTTON=7, WS=8, 
		NEWLINE=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "IDENTIFIER", "SEMI", "SCREEN", "CHECK", "BUTTON", "WS", 
		"NEWLINE", "CHARACTER", "LETTER", "DIGIT"
	};


	public youiLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public youiLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", null, "';'", "'screen'", "'check'", "'button'", null, 
		"'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "IDENTIFIER", "SEMI", "SCREEN", "CHECK", "BUTTON", "WS", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "youi.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static youiLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', 'O', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\"', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '%', '\v', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x6', '\t', '>', '\n', '\t', '\r', '\t', 
		'\xE', '\t', '?', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'J', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x2', 
		'\x2', '\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\x2', 
		'\x17', '\x2', '\x19', '\x2', '\x3', '\x2', '\x5', '\x5', '\x2', '\v', 
		'\v', '\xE', '\xE', '\"', '\"', '\b', '\x2', '%', '%', '*', '+', '\x31', 
		'\x31', '\x42', '\\', '\x61', '\x61', '\x63', '|', '\x4', '\x2', '-', 
		'\x30', '\x32', ';', '\x2', 'N', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\t', '&', '\x3', '\x2', '\x2', '\x2', '\v', '(', 
		'\x3', '\x2', '\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x11', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x43', '\x3', '\x2', '\x2', '\x2', '\x15', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x17', 'K', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', ']', '\x2', '\x2', 
		'\x1C', '\x4', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '_', 
		'\x2', '\x2', '\x1E', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1F', '#', 
		'\x5', '\x17', '\f', '\x2', ' ', '\"', '\x5', '\x15', '\v', '\x2', '!', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', 
		'#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '\b', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\a', '=', '\x2', '\x2', '\'', '\n', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\a', 'u', '\x2', '\x2', ')', '*', '\a', '\x65', '\x2', 
		'\x2', '*', '+', '\a', 't', '\x2', '\x2', '+', ',', '\a', 'g', '\x2', 
		'\x2', ',', '-', '\a', 'g', '\x2', '\x2', '-', '.', '\a', 'p', '\x2', 
		'\x2', '.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x65', 
		'\x2', '\x2', '\x30', '\x31', '\a', 'j', '\x2', '\x2', '\x31', '\x32', 
		'\a', 'g', '\x2', '\x2', '\x32', '\x33', '\a', '\x65', '\x2', '\x2', '\x33', 
		'\x34', '\a', 'm', '\x2', '\x2', '\x34', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\a', '\x64', '\x2', '\x2', '\x36', '\x37', '\a', 'w', 
		'\x2', '\x2', '\x37', '\x38', '\a', 'v', '\x2', '\x2', '\x38', '\x39', 
		'\a', 'v', '\x2', '\x2', '\x39', ':', '\a', 'q', '\x2', '\x2', ':', ';', 
		'\a', 'p', '\x2', '\x2', ';', '\x10', '\x3', '\x2', '\x2', '\x2', '<', 
		'>', '\t', '\x2', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\b', '\t', '\x2', '\x2', '\x42', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\f', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\b', '\n', '\x2', 
		'\x2', '\x46', '\x14', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x5', '\x17', 
		'\f', '\x2', 'H', 'J', '\x5', '\x19', '\r', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', '\x16', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\t', '\x3', '\x2', '\x2', 'L', '\x18', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'N', '\t', '\x4', '\x2', '\x2', 'N', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x2', '#', '?', 'I', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
